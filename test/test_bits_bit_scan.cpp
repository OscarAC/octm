#include <octm/bits/bit_scan.hpp>
#include <octm/test/assert.hpp>

#include <bitset>
#include <iostream>

using namespace oc::fn;

void test_bsf_constexpr()
{
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000000) == -1);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000011100000000000000000100000000000000000000000000000001) == 0);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000001000000000000000000000000000000010) == 1);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000001100000000000011000000010000000000000000000000000000000100) == 2);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000100000000000000000000000000000001000) == 3);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000001000000000000000000000000000000010000) == 4);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000110000010000000000000000000000000000000100000) == 5);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000100000000000000100000000000000000000000000000001000000) == 6);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000100001000000000000000000000000000000010000000) == 7);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000110000000000010000000000000000000000000000000100000000) == 8);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000100000100000000000000000000000000000001000000000) == 9);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000010000000000) == 10);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000100000000000) == 11);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000010000000000000000000000000000001000000000000) == 12);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000001000110000000100000000000000000000000000000010000000000000) == 13);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000010000001000000000000000000000000000000100000000000000) == 14);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000001000000000010000000000000000000000000000001000000000000000) == 15);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0001000000000000100000000000000000000000000000010000000000000000) == 16);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000001000000000000000000000000000000100000000000000000) == 17);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000010010000000000000000000000000000001000000000000000000) == 18);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000010000000000000000000) == 19);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000100000000000000000000) == 20);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000001000000000000000000000000000001000000000000000000000) == 21);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000010000000000000000000000000000010000000000000000000000) == 22);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000100000000000000000000000000000100000000000000000000000) == 23);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000001000000000000000000000000000001000000000000000000000000) == 24);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000010000000000000000000000000000010000000000000000000000000) == 25);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000100000000000000000000000000000100000000000000000000000000) == 26);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000001000000000000000000000000000001000000000000000000000000000) == 27);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000010000000000000000000000000000010000000000000000000000000000) == 28);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000100000000000000000000000000000100000000000000000000000000000) == 29);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0001000000000000000000000000000001000000000000000000000000000000) == 30);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0010000000000000000000000000000010000000000000000000000000000000) == 31);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000011100000000000000000100000000000000000000000000000000) == 32);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000001000000000000000000000000000000000) == 33);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000001100000000000011000000010000000000000000000000000000000000) == 34);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000100000000000000000000000000000000000) == 35);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000001000000000000000000000000000000000000) == 36);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000110000010000000000000000000000000000000000000) == 37);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000100000000000000100000000000000000000000000000000000000) == 38);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000100001000000000000000000000000000000000000000) == 39);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000110000000000010000000000000000000000000000000000000000) == 40);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000100000100000000000000000000000000000000000000000) == 41);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000000000000000) == 42);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000010000000000000000000000000000000000000000000) == 43);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000001000110000000100000000000000000000000000000000000000000000) == 44);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000010000001000000000000000000000000000000000000000000000) == 45);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000001000000000010000000000000000000000000000000000000000000000) == 46);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0001000000000000100000000000000000000000000000000000000000000000) == 47);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000001000000000000000000000000000000000000000000000000) == 48);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000010010000000000000000000000000000000000000000000000000) == 49);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000000000000000000000000) == 50);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000001000000000000000000000000000000000000000000000000000) == 51);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000010000000000000000000000000000000000000000000000000000) == 52);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000000100000000000000000000000000000000000000000000000000000) == 53);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000001000000000000000000000000000000000000000000000000000000) == 54);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000010000000000000000000000000000000000000000000000000000000) == 55);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000000100000000000000000000000000000000000000000000000000000000) == 56);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000001000000000000000000000000000000000000000000000000000000000) == 57);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000010000000000000000000000000000000000000000000000000000000000) == 58);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0000100000000000000000000000000000000000000000000000000000000000) == 59);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0001000000000000000000000000000000000000000000000000000000000000) == 60);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0010000000000000000000000000000000000000000000000000000000000000) == 61);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b0100000000000000000000000000000000000000000000000000000000000000) == 62);
    STATIC_ASSERT(bit_scan_forward((uint64_t)0b1000000000000000000000000000000000000000000000000000000000000000) == 63);
}

void test_bsf()
{
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000000) == -1);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000011100000000000000000100000000000000000000000000000001) == 0);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000001000000000000000000000000000000010) == 1);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000001100000000000011000000010000000000000000000000000000000100) == 2);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000100000000000000000000000000000001000) == 3);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000001000000000000000000000000000000010000) == 4);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000110000010000000000000000000000000000000100000) == 5);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000100000000000000100000000000000000000000000000001000000) == 6);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000100001000000000000000000000000000000010000000) == 7);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000110000000000010000000000000000000000000000000100000000) == 8);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000100000100000000000000000000000000000001000000000) == 9);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000010000000000) == 10);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000100000000000) == 11);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000010000000000000000000000000000001000000000000) == 12);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000001000110000000100000000000000000000000000000010000000000000) == 13);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000010000001000000000000000000000000000000100000000000000) == 14);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000001000000000010000000000000000000000000000001000000000000000) == 15);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0001000000000000100000000000000000000000000000010000000000000000) == 16);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000001000000000000000000000000000000100000000000000000) == 17);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000010010000000000000000000000000000001000000000000000000) == 18);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000010000000000000000000) == 19);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000100000000000000000000) == 20);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000001000000000000000000000000000001000000000000000000000) == 21);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000010000000000000000000000000000010000000000000000000000) == 22);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000100000000000000000000000000000100000000000000000000000) == 23);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000001000000000000000000000000000001000000000000000000000000) == 24);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000010000000000000000000000000000010000000000000000000000000) == 25);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000100000000000000000000000000000100000000000000000000000000) == 26);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000001000000000000000000000000000001000000000000000000000000000) == 27);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000010000000000000000000000000000010000000000000000000000000000) == 28);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000100000000000000000000000000000100000000000000000000000000000) == 29);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0001000000000000000000000000000001000000000000000000000000000000) == 30);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0010000000000000000000000000000010000000000000000000000000000000) == 31);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000011100000000000000000100000000000000000000000000000000) == 32);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000001000000000000000000000000000000000) == 33);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000001100000000000011000000010000000000000000000000000000000000) == 34);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000000100000000000000000000000000000000000) == 35);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000000000001000000000000000000000000000000000000) == 36);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000110000010000000000000000000000000000000000000) == 37);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000100000000000000100000000000000000000000000000000000000) == 38);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000100001000000000000000000000000000000000000000) == 39);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000110000000000010000000000000000000000000000000000000000) == 40);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000100000100000000000000000000000000000000000000000) == 41);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000000000000000) == 42);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000000000010000000000000000000000000000000000000000000) == 43);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000001000110000000100000000000000000000000000000000000000000000) == 44);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000010000001000000000000000000000000000000000000000000000) == 45);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000001000000000010000000000000000000000000000000000000000000000) == 46);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0001000000000000100000000000000000000000000000000000000000000000) == 47);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000001000000000000000000000000000000000000000000000000) == 48);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000010010000000000000000000000000000000000000000000000000) == 49);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000000000000000000000000) == 50);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000001000000000000000000000000000000000000000000000000000) == 51);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000010000000000000000000000000000000000000000000000000000) == 52);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000000100000000000000000000000000000000000000000000000000000) == 53);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000001000000000000000000000000000000000000000000000000000000) == 54);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000010000000000000000000000000000000000000000000000000000000) == 55);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000000100000000000000000000000000000000000000000000000000000000) == 56);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000001000000000000000000000000000000000000000000000000000000000) == 57);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000010000000000000000000000000000000000000000000000000000000000) == 58);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0000100000000000000000000000000000000000000000000000000000000000) == 59);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0001000000000000000000000000000000000000000000000000000000000000) == 60);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0010000000000000000000000000000000000000000000000000000000000000) == 61);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b0100000000000000000000000000000000000000000000000000000000000000) == 62);
    TEST_ASSERT(bit_scan_forward((uint64_t)0b1000000000000000000000000000000000000000000000000000000000000000) == 63);
}

void test_bsr_constexpr()
{
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000000) == -1);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b1000000000000000000000000000000000000000000000000000000000000000) == 63);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0100000000000000001000000000000000000000000000000000000000000000) == 62);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0010000000000000000100000000000000000000000000000000000000000000) == 61);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0001000000000000000001110000000000000000000100000000000000000000) == 60);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000100000000000000000000011100000000000001000000000000000000000) == 59);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000010000000000000000000000001100000000000000000000000000000000) == 58);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000001000000000000000000000001100000000000100000000000000000000) == 57);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000100000000000000000000000000000000000000000000000000000000) == 56);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000010000000000000000000000000000000000100000000000000000000) == 55);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000001000000000000000000000000000000000000000000000000000001) == 54);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000100000000000000000000000000000000000000000000001000100) == 53);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000010000000000000000000000000000000000000000100000000000) == 52);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000001000000000000000000000000011000000000000000000000000) == 51);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000100000000000000000000000000000000000000000000000111) == 50);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000010000000000000000000000000100000000000000000000000) == 49);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000001000000000000000000000000000000000000000000001000) == 48);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000100000000000000000000001101000000000000000000000) == 47);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000010000000000000000000000001000000000000000000000) == 46);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000001000000000000000000000000001000000000000000000) == 45);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000100000000000000000100000000000000000000000000) == 44);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000010000000000000100000000000000000000000000000) == 43);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000001000000000000000000000000010000000000000000) == 42);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000100000000000000000000000000000100000000000) == 41);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000010000000000000000000000000000000010000000) == 40);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000001000000000000000000000000000001010000000) == 39);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000100000000000000000000000000100000000000) == 38);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000010000000000000000010001000000000000000) == 37);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000001000000000000000010100000000000100000) == 36);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000100000000001000000000000000000001100) == 35);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000010000000001000000000000000000000000) == 34);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000001000000000000100000000000000000000) == 33);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000100000000000000100000000000000000) == 32);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000010000000000000000100000000000000) == 31);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000001000000000010000000000000000000) == 30);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000100000000011010000000000000000) == 29);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000010000000000000000000000000000) == 28);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000001000000000000010001000000000) == 27);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000100000000000000010000000000) == 26);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000010000000001100001000000000) == 25);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000001000000000000000000010000) == 24);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000100000000100010000000000) == 23);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000010000000000000000000010) == 22);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000001000000000000000110000) == 21);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000100000000000001000000) == 20);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000010000000010000000000) == 19);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000001000000000010000000) == 18);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000100000000000001000) == 17);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000010000000000000100) == 16);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000001000000000100000) == 15);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000100000010000000) == 14);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000010000000000000) == 13);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000001000000010100) == 12);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000100001000000) == 11);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000010000100000) == 10);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000001000000100) == 9);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000100000001) == 8);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000010000010) == 7);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000001010000) == 6);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000101000) == 5);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000011000) == 4);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000001000) == 3);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000100) == 2);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000010) == 1);
    STATIC_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000001) == 0);
}

void test_bsr()
{
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000000) == -1);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b1000000000000000000000000000000000000000000000000000000000000000) == 63);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0100000000000000001000000000000000000000000000000000000000000000) == 62);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0010000000000000000100000000000000000000000000000000000000000000) == 61);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0001000000000000000001110000000000000000000100000000000000000000) == 60);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000100000000000000000000011100000000000001000000000000000000000) == 59);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000010000000000000000000000001100000000000000000000000000000000) == 58);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000001000000000000000000000001100000000000100000000000000000000) == 57);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000100000000000000000000000000000000000000000000000000000000) == 56);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000010000000000000000000000000000000000100000000000000000000) == 55);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000001000000000000000000000000000000000000000000000000000001) == 54);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000100000000000000000000000000000000000000000000001000100) == 53);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000010000000000000000000000000000000000000000100000000000) == 52);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000001000000000000000000000000011000000000000000000000000) == 51);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000100000000000000000000000000000000000000000000000111) == 50);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000010000000000000000000000000100000000000000000000000) == 49);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000001000000000000000000000000000000000000000000001000) == 48);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000100000000000000000000001101000000000000000000000) == 47);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000010000000000000000000000001000000000000000000000) == 46);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000001000000000000000000000000001000000000000000000) == 45);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000100000000000000000100000000000000000000000000) == 44);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000010000000000000100000000000000000000000000000) == 43);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000001000000000000000000000000010000000000000000) == 42);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000100000000000000000000000000000100000000000) == 41);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000010000000000000000000000000000000010000000) == 40);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000001000000000000000000000000000001010000000) == 39);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000100000000000000000000000000100000000000) == 38);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000010000000000000000010001000000000000000) == 37);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000001000000000000000010100000000000100000) == 36);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000100000000001000000000000000000001100) == 35);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000010000000001000000000000000000000000) == 34);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000001000000000000100000000000000000000) == 33);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000100000000000000100000000000000000) == 32);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000010000000000000000100000000000000) == 31);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000001000000000010000000000000000000) == 30);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000100000000011010000000000000000) == 29);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000010000000000000000000000000000) == 28);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000001000000000000010001000000000) == 27);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000100000000000000010000000000) == 26);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000010000000001100001000000000) == 25);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000001000000000000000000010000) == 24);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000100000000100010000000000) == 23);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000010000000000000000000010) == 22);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000001000000000000000110000) == 21);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000100000000000001000000) == 20);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000010000000010000000000) == 19);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000001000000000010000000) == 18);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000100000000000001000) == 17);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000010000000000000100) == 16);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000001000000000100000) == 15);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000100000010000000) == 14);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000010000000000000) == 13);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000001000000010100) == 12);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000100001000000) == 11);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000010000100000) == 10);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000001000000100) == 9);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000100000001) == 8);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000010000010) == 7);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000001010000) == 6);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000101000) == 5);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000011000) == 4);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000001000) == 3);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000100) == 2);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000010) == 1);
    TEST_ASSERT(bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000001) == 0);
}

void test_bsf_x64()
{
#ifdef TEST_X64_ASM
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000000) == -1);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000011100000000000000000100000000000000000000000000000001) == 0);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000000000000001000000000000000000000000000000010) == 1);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000001100000000000011000000010000000000000000000000000000000100) == 2);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000000000000100000000000000000000000000000001000) == 3);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000000000001000000000000000000000000000000010000) == 4);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000110000010000000000000000000000000000000100000) == 5);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000100000000000000100000000000000000000000000000001000000) == 6);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000100001000000000000000000000000000000010000000) == 7);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000110000000000010000000000000000000000000000000100000000) == 8);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000100000100000000000000000000000000000001000000000) == 9);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000010000000000) == 10);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000100000000000) == 11);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000010000000000000000000000000000001000000000000) == 12);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000001000110000000100000000000000000000000000000010000000000000) == 13);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000010000001000000000000000000000000000000100000000000000) == 14);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000001000000000010000000000000000000000000000001000000000000000) == 15);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0001000000000000100000000000000000000000000000010000000000000000) == 16);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000001000000000000000000000000000000100000000000000000) == 17);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000010010000000000000000000000000000001000000000000000000) == 18);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000010000000000000000000) == 19);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000100000000000000000000) == 20);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000001000000000000000000000000000001000000000000000000000) == 21);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000010000000000000000000000000000010000000000000000000000) == 22);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000100000000000000000000000000000100000000000000000000000) == 23);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000001000000000000000000000000000001000000000000000000000000) == 24);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000010000000000000000000000000000010000000000000000000000000) == 25);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000100000000000000000000000000000100000000000000000000000000) == 26);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000001000000000000000000000000000001000000000000000000000000000) == 27);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000010000000000000000000000000000010000000000000000000000000000) == 28);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000100000000000000000000000000000100000000000000000000000000000) == 29);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0001000000000000000000000000000001000000000000000000000000000000) == 30);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0010000000000000000000000000000010000000000000000000000000000000) == 31);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000011100000000000000000100000000000000000000000000000000) == 32);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000000000000001000000000000000000000000000000000) == 33);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000001100000000000011000000010000000000000000000000000000000000) == 34);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000000000000100000000000000000000000000000000000) == 35);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000000000001000000000000000000000000000000000000) == 36);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000110000010000000000000000000000000000000000000) == 37);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000100000000000000100000000000000000000000000000000000000) == 38);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000100001000000000000000000000000000000000000000) == 39);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000110000000000010000000000000000000000000000000000000000) == 40);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000100000100000000000000000000000000000000000000000) == 41);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000001000000000000000000000000000000000000000000) == 42);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000000000010000000000000000000000000000000000000000000) == 43);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000001000110000000100000000000000000000000000000000000000000000) == 44);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000010000001000000000000000000000000000000000000000000000) == 45);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000001000000000010000000000000000000000000000000000000000000000) == 46);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0001000000000000100000000000000000000000000000000000000000000000) == 47);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000001000000000000000000000000000000000000000000000000) == 48);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000010010000000000000000000000000000000000000000000000000) == 49);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000000100000000000000000000000000000000000000000000000000) == 50);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000001000000000000000000000000000000000000000000000000000) == 51);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000010000000000000000000000000000000000000000000000000000) == 52);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000000100000000000000000000000000000000000000000000000000000) == 53);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000001000000000000000000000000000000000000000000000000000000) == 54);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000010000000000000000000000000000000000000000000000000000000) == 55);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000000100000000000000000000000000000000000000000000000000000000) == 56);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000001000000000000000000000000000000000000000000000000000000000) == 57);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000010000000000000000000000000000000000000000000000000000000000) == 58);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0000100000000000000000000000000000000000000000000000000000000000) == 59);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0001000000000000000000000000000000000000000000000000000000000000) == 60);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0010000000000000000000000000000000000000000000000000000000000000) == 61);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b0100000000000000000000000000000000000000000000000000000000000000) == 62);
    TEST_ASSERT(x64::bit_scan_forward((uint64_t)0b1000000000000000000000000000000000000000000000000000000000000000) == 63);
#endif
}


void test_bsr_x64()
{
#ifdef TEST_X64_ASM
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000000) == -1);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b1000000000000000000000000000000000000000000000000000000000000000) == 63);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0100000000000000001000000000000000000000000000000000000000000000) == 62);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0010000000000000000100000000000000000000000000000000000000000000) == 61);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0001000000000000000001110000000000000000000100000000000000000000) == 60);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000100000000000000000000011100000000000001000000000000000000000) == 59);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000010000000000000000000000001100000000000000000000000000000000) == 58);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000001000000000000000000000001100000000000100000000000000000000) == 57);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000100000000000000000000000000000000000000000000000000000000) == 56);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000010000000000000000000000000000000000100000000000000000000) == 55);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000001000000000000000000000000000000000000000000000000000001) == 54);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000100000000000000000000000000000000000000000000001000100) == 53);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000010000000000000000000000000000000000000000100000000000) == 52);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000001000000000000000000000000011000000000000000000000000) == 51);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000100000000000000000000000000000000000000000000000111) == 50);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000010000000000000000000000000100000000000000000000000) == 49);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000001000000000000000000000000000000000000000000001000) == 48);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000100000000000000000000001101000000000000000000000) == 47);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000010000000000000000000000001000000000000000000000) == 46);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000001000000000000000000000000001000000000000000000) == 45);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000100000000000000000100000000000000000000000000) == 44);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000010000000000000100000000000000000000000000000) == 43);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000001000000000000000000000000010000000000000000) == 42);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000100000000000000000000000000000100000000000) == 41);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000010000000000000000000000000000000010000000) == 40);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000001000000000000000000000000000001010000000) == 39);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000100000000000000000000000000100000000000) == 38);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000010000000000000000010001000000000000000) == 37);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000001000000000000000010100000000000100000) == 36);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000100000000001000000000000000000001100) == 35);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000010000000001000000000000000000000000) == 34);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000001000000000000100000000000000000000) == 33);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000100000000000000100000000000000000) == 32);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000010000000000000000100000000000000) == 31);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000001000000000010000000000000000000) == 30);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000100000000011010000000000000000) == 29);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000010000000000000000000000000000) == 28);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000001000000000000010001000000000) == 27);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000100000000000000010000000000) == 26);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000010000000001100001000000000) == 25);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000001000000000000000000010000) == 24);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000100000000100010000000000) == 23);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000010000000000000000000010) == 22);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000001000000000000000110000) == 21);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000100000000000001000000) == 20);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000010000000010000000000) == 19);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000001000000000010000000) == 18);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000100000000000001000) == 17);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000010000000000000100) == 16);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000001000000000100000) == 15);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000100000010000000) == 14);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000010000000000000) == 13);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000001000000010100) == 12);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000100001000000) == 11);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000010000100000) == 10);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000001000000100) == 9);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000100000001) == 8);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000010000010) == 7);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000001010000) == 6);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000101000) == 5);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000011000) == 4);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000001000) == 3);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000100) == 2);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000010) == 1);
    TEST_ASSERT(x64::bit_scan_reverse((uint64_t)0b0000000000000000000000000000000000000000000000000000000000000001) == 0);
#endif
}

int main(int, char **)
{
    test_bsf();
    test_bsf_x64();
    test_bsr();
    return 0;
}